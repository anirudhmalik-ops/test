{
	"info": {
		"_postman_id": "file-ai-formatter-api-enhanced",
		"name": "File AI Formatter API - Enhanced",
		"description": "Enhanced API collection with automated tests and workflow for the File AI Formatter application. Includes complete Excel processing pipeline with automated file handling.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. Health Check",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/health",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"health"
					]
				},
				"description": "Check if the API is running and healthy"
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"    pm.expect(jsonData.message).to.eql('project running');",
							"});",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "2. API Status",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/status",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"status"
					]
				},
				"description": "Get the status of API configuration and which services are available"
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has required fields\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('openai_configured');",
							"    pm.expect(jsonData).to.have.property('openai_provider');",
							"    pm.expect(jsonData).to.have.property('excel_processor_configured');",
							"});",
							"",
							"pm.test(\"OpenAI is configured\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.openai_configured).to.be.true;",
							"});",
							"",
							"pm.test(\"Excel processor is configured\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.excel_processor_configured).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "3. Upload Excel File",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": [],
							"description": "Excel file to upload (.xlsx or .xls format, max 16MB)"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/upload/excel",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"upload",
						"excel"
					]
				},
				"description": "Upload an Excel file for AI processing. The file will be processed using OpenAI and formatted according to the template structure."
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has required fields\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"    pm.expect(jsonData).to.have.property('output_file');",
							"    pm.expect(jsonData).to.have.property('download_url');",
							"});",
							"",
							"pm.test(\"Success message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql('File processed successfully');",
							"});",
							"",
							"// Store the processed filename for download",
							"if (pm.response.code === 200) {",
							"    var jsonData = pm.response.json();",
							"    pm.environment.set('processed_filename', jsonData.output_file);",
							"    pm.environment.set('download_url', jsonData.download_url);",
							"    console.log('Processed file: ' + jsonData.output_file);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "4. Download Processed File",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/download/{{processed_filename}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"download",
						"{{processed_filename}}"
					]
				},
				"description": "Download a processed Excel file using the filename from the upload response"
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is a file\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');",
							"});",
							"",
							"pm.test(\"File has content\", function () {",
							"    pm.expect(pm.response.size().body).to.be.above(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "5. OpenAI Chat Test",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"Hello, can you help me process some Excel data?\"\n    }\n  ],\n  \"temperature\": 0.7,\n  \"max_tokens\": 1000\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/openai/chat",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"openai",
						"chat"
					]
				},
				"description": "Test OpenAI chat functionality with a simple message"
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has OpenAI structure\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('choices');",
							"    pm.expect(jsonData.choices).to.be.an('array');",
							"    pm.expect(jsonData.choices[0]).to.have.property('message');",
							"});",
							"",
							"pm.test(\"Response has content\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.choices[0].message).to.have.property('content');",
							"    pm.expect(jsonData.choices[0].message.content).to.not.be.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "6. Anthropic Chat Test",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"Hello Claude, can you help me with data analysis?\"\n    }\n  ],\n  \"model\": \"claude-3-sonnet-20240229\",\n  \"max_tokens\": 1000\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/anthropic/chat",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"anthropic",
						"chat"
					]
				},
				"description": "Test Anthropic Claude chat functionality (requires ANTHROPIC_API_KEY to be configured)"
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 500\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 500]);",
							"});",
							"",
							"if (pm.response.code === 200) {",
							"    pm.test(\"Response has Anthropic structure\", function () {",
							"        var jsonData = pm.response.json();",
							"        pm.expect(jsonData).to.have.property('content');",
							"        pm.expect(jsonData.content).to.be.an('array');",
							"    });",
							"} else {",
							"    pm.test(\"API key not configured (expected for demo)\", function () {",
							"        var jsonData = pm.response.json();",
							"        pm.expect(jsonData).to.have.property('error');",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Pre-request script for collection-level setup",
					"console.log('Starting request to: ' + pm.request.url);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Collection-level test script",
					"console.log('Request completed: ' + pm.response.status);"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:5001",
			"type": "string",
			"description": "Base URL for the API server"
		},
		{
			"key": "processed_filename",
			"value": "",
			"type": "string",
			"description": "Automatically set from upload response"
		},
		{
			"key": "download_url",
			"value": "",
			"type": "string",
			"description": "Automatically set from upload response"
		}
	]
} 